service: ai-chat-api

plugins:
    - serverless-dotenv-plugin

stages:
    default:
        params:
            customDomainNameChatApi: chat.${param:customDomainName}
            dynamoDbUsageTableName: ${self:service}-usage-table-${sls:stage}
            throttleMonthlyLimitUser: 2000
            throttleMonthlyLimitGlobal: 2000000

useDotenv: true

provider:
    name: aws
    runtime: nodejs20.x
    httpApi:
        cors: true
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                  Resource:
                      - Fn::GetAtt:
                            - DynamoDbUsageTable
                            - Arn
build:
    esbuild:
        # By default the @aws-sdk/* packages are marked as external because they are
        # included in the Lambda runtime; however, the lambda runtime packages are
        # behind the latest release. At the time of writing, the lambda runtime did
        # not include the @aws-sdk/bedrock-runtime-client. By setting the external
        # and exclude options to [], we instruct ESBuild to include these packages
        # in the bundle.
        exclude:
            - "@aws-sdk/*"

functions:
    api:
        handler: handler.handler
        timeout: 60
        url:
            invokeMode: RESPONSE_STREAM
            cors: true
        environment:
            SHARED_TOKEN_SECRET: ${param:sharedTokenSecret, 'DEFAULT'}
            USAGE_TABLE_NAME: ${param:dynamoDbUsageTableName}
            THROTTLE_MONTHLY_LIMIT_USER: ${param:throttleMonthlyLimitUser}
            THROTTLE_MONTHLY_LIMIT_GLOBAL: ${param:throttleMonthlyLimitGlobal}
    request:
        handler: handler.request_handler
        timeout: 30
        events:
            - httpApi:
                  method: POST
                  path: /proxy
        environment:
            SHARED_TOKEN_SECRET: ${param:sharedTokenSecret, 'DEFAULT'}
            USAGE_TABLE_NAME: ${param:dynamoDbUsageTableName}
            THROTTLE_MONTHLY_LIMIT_USER: ${param:throttleMonthlyLimitUser}
            THROTTLE_MONTHLY_LIMIT_GLOBAL: ${param:throttleMonthlyLimitGlobal}

resources:
    # This condition is used to determine whether the custom domain name is
    # enabled. The CloudFront distribution and Route 53 record set group are
    # only created if the custom domain name is enabled. Otherwise the default
    # Lambda function URL is used.
    Conditions:
        CustomDomainNameEnabled:
            Fn::Equals:
                - ${param:customDomainNameEnabled, false}
                - true
    Resources:
        DynamoDbUsageTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                    - AttributeName: SK
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                    - AttributeName: SK
                      KeyType: RANGE
                BillingMode: PAY_PER_REQUEST
                TableName: ${param:dynamoDbUsageTableName}
        ApiCloudFrontDistribution:
            Type: AWS::CloudFront::Distribution
            Condition: CustomDomainNameEnabled
            DeletionPolicy: Delete
            Properties:
                DistributionConfig:
                    Enabled: true
                    PriceClass: PriceClass_100
                    HttpVersion: http2
                    Comment: Distribution to support the custom domain name ${param:customDomainNameChatApi} for the AI Chat API Service
                    Origins:
                        - Id: ChatAPILambdaFunction
                          DomainName:
                              !Select [
                                  2,
                                  !Split [
                                      "/",
                                      !GetAtt ApiLambdaFunctionUrl.FunctionUrl,
                                  ],
                              ]
                          OriginPath: ""
                          CustomOriginConfig:
                              HTTPPort: 80
                              HTTPSPort: 443
                              OriginProtocolPolicy: https-only
                              OriginSSLProtocols: [TLSv1, TLSv1.1, TLSv1.2]
                    DefaultCacheBehavior:
                        TargetOriginId: ChatAPILambdaFunction
                        ViewerProtocolPolicy: redirect-to-https
                        Compress: true
                        AllowedMethods:
                            - HEAD
                            - DELETE
                            - POST
                            - GET
                            - OPTIONS
                            - PUT
                            - PATCH
                        ForwardedValues:
                            QueryString: true
                            Headers:
                                - Authorization
                            Cookies:
                                Forward: all
                    Aliases:
                        - ${param:customDomainNameChatApi}
                    ViewerCertificate:
                        SslSupportMethod: sni-only
                        MinimumProtocolVersion: TLSv1.2_2021
                        AcmCertificateArn: ${param:customDomainCertificateARN, 'NA'}
        ApiRecordSetGroup:
            Type: AWS::Route53::RecordSetGroup
            DeletionPolicy: Delete
            Condition: CustomDomainNameEnabled
            DependsOn:
                - ApiCloudFrontDistribution
            Properties:
                HostedZoneName: ${param:customDomainName, 'NA'}.
                RecordSets:
                    - Name: ${param:customDomainNameChatApi}
                      Type: A
                      AliasTarget:
                          HostedZoneId: Z2FDTNDATAQYW2 # Cloudfront default hosted zone ID
                          DNSName:
                              {
                                  "Fn::GetAtt":
                                      [ApiCloudFrontDistribution, DomainName],
                              }
                          Outputs:
    Outputs:
        # This exports the URL of the endpoint with the custom domain name, if it is
        # available, otherwise it provides the default Lambda function URL.
        ChatApiUrl:
            Value:
                Fn::If:
                    - CustomDomainNameEnabled
                    - !Sub "https://${param:customDomainNameChatApi}"
                    - !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
